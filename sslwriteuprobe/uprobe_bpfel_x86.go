// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type uprobeActiveSslBuf struct{ Buf uint64 }

type uprobeArguments struct{ Pid uint32 }

type uprobeSslDataEventT struct {
	TimestampNs uint64
	Pid         uint32
	Tid         uint32
	Data        [4096]uint8
	DataLen     int32
	Comm        [16]uint8
	_           [4]byte
}

// loadUprobe returns the embedded CollectionSpec for uprobe.
func loadUprobe() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_UprobeBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load uprobe: %w", err)
	}

	return spec, err
}

// loadUprobeObjects loads uprobe and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*uprobeObjects
//	*uprobePrograms
//	*uprobeMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadUprobeObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadUprobe()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// uprobeSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type uprobeSpecs struct {
	uprobeProgramSpecs
	uprobeMapSpecs
}

// uprobeSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type uprobeProgramSpecs struct {
	ProbeEntrySSL_write *ebpf.ProgramSpec `ebpf:"probe_entry_SSL_write"`
	ProbeRetSSL_write   *ebpf.ProgramSpec `ebpf:"probe_ret_SSL_write"`
}

// uprobeMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type uprobeMapSpecs struct {
	ActiveSslWriteArgsMap *ebpf.MapSpec `ebpf:"active_ssl_write_args_map"`
	ParamsArray           *ebpf.MapSpec `ebpf:"params_array"`
	RingBuffer            *ebpf.MapSpec `ebpf:"ring_buffer"`
}

// uprobeObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadUprobeObjects or ebpf.CollectionSpec.LoadAndAssign.
type uprobeObjects struct {
	uprobePrograms
	uprobeMaps
}

func (o *uprobeObjects) Close() error {
	return _UprobeClose(
		&o.uprobePrograms,
		&o.uprobeMaps,
	)
}

// uprobeMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadUprobeObjects or ebpf.CollectionSpec.LoadAndAssign.
type uprobeMaps struct {
	ActiveSslWriteArgsMap *ebpf.Map `ebpf:"active_ssl_write_args_map"`
	ParamsArray           *ebpf.Map `ebpf:"params_array"`
	RingBuffer            *ebpf.Map `ebpf:"ring_buffer"`
}

func (m *uprobeMaps) Close() error {
	return _UprobeClose(
		m.ActiveSslWriteArgsMap,
		m.ParamsArray,
		m.RingBuffer,
	)
}

// uprobePrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadUprobeObjects or ebpf.CollectionSpec.LoadAndAssign.
type uprobePrograms struct {
	ProbeEntrySSL_write *ebpf.Program `ebpf:"probe_entry_SSL_write"`
	ProbeRetSSL_write   *ebpf.Program `ebpf:"probe_ret_SSL_write"`
}

func (p *uprobePrograms) Close() error {
	return _UprobeClose(
		p.ProbeEntrySSL_write,
		p.ProbeRetSSL_write,
	)
}

func _UprobeClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed uprobe_bpfel_x86.o
var _UprobeBytes []byte
