// Code generated by bpf2go; DO NOT EDIT.
//go:build arm64be || armbe || mips || mips64 || mips64p32 || ppc64 || s390 || s390x || sparc || sparc64

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type openEvent struct {
	Pid     uint32
	Command [64]uint8
	Path    [64]uint8
}

// loadOpen returns the embedded CollectionSpec for open.
func loadOpen() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_OpenBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load open: %w", err)
	}

	return spec, err
}

// loadOpenObjects loads open and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*openObjects
//	*openPrograms
//	*openMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadOpenObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadOpen()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// openSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type openSpecs struct {
	openProgramSpecs
	openMapSpecs
}

// openSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type openProgramSpecs struct {
	HandleOpenat *ebpf.ProgramSpec `ebpf:"handle_openat"`
}

// openMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type openMapSpecs struct {
	RingBuffer *ebpf.MapSpec `ebpf:"ring_buffer"`
}

// openObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadOpenObjects or ebpf.CollectionSpec.LoadAndAssign.
type openObjects struct {
	openPrograms
	openMaps
}

func (o *openObjects) Close() error {
	return _OpenClose(
		&o.openPrograms,
		&o.openMaps,
	)
}

// openMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadOpenObjects or ebpf.CollectionSpec.LoadAndAssign.
type openMaps struct {
	RingBuffer *ebpf.Map `ebpf:"ring_buffer"`
}

func (m *openMaps) Close() error {
	return _OpenClose(
		m.RingBuffer,
	)
}

// openPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadOpenObjects or ebpf.CollectionSpec.LoadAndAssign.
type openPrograms struct {
	HandleOpenat *ebpf.Program `ebpf:"handle_openat"`
}

func (p *openPrograms) Close() error {
	return _OpenClose(
		p.HandleOpenat,
	)
}

func _OpenClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed open_bpfeb.o
var _OpenBytes []byte
